<?php
/**
 * @file
 * NNELS Stats module.
 */

/**
 * Implements hook_menu().
 */
function nnels_stats_menu() {
  $items = array();
  
	$items['admin/config/nnels_stats'] = array(
    'title' => 'Test NNELS Stats Entity Status',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'nnels_stats_test_entity',
    'type' => MENU_NORMAL_ITEM,
	);
	//http://s3.libraries.coop/download2.nnels.ca/repo-items/1/1426616506/nnels-test-12.39.21%20PM.png.zip
  
  return $items;
}



/**
 * Implements hook_exit().
 */
function nnels_stats_exit() {
	//for testing / dev purposes, only track on specific IPs
	$ips = array('99.246.47.248', '70.26.15.139', '50.69.30.84');
	$ips = array('99.246.47.248');

	$ips = array('10.77.110.14'); // google or some other spider??
	$ip = $_SERVER['REMOTE_ADDR'];
	if(!in_array($ip, $ips) && strpos($ip, '180.76') === FALSE) _nnels_stats_tracker();
  //_nnels_stats_tracker();
}

/**
 * Implements hook_views_api().
 */
function nnels_stats_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'nnels_stats') . '/includes/views',
    );
}

/**
 * Implements hook_user_logout(). Not currently implemented
 */
function nnels_stats_user_logoutxxxx($account) {

}

/**
 * Implements hook_user_login().
 */
function nnels_stats_user_login(&$edit, $account) {
  global $user;
	//dpm(__FUNCTION__);

	//if no login session, its likely because we're dealing w/ referring_url_type = 4
	if(empty($_SESSION['nnels_stats'])) {
		$arr = array();
		$arr['orgid'] = nnels_stats_get_org_by_uid($account->uid);
		$arr['ip_address'] = $_SERVER['REMOTE_ADDR'];
		//get the referring URL
  	$ref = nnels_stats_get_referrer();
  	
		//referring url types: 1 = blank / direct; 2 = external (not partner); 3 = referring (partner); 4 = site?
		$arr['referring_url_type'] = 4; //?? nnels_stats_get_url_type($ref); 
	  $arr['new_user'] = 0;
	  $arr['authen_result'] = 1;
		$arr['visitid'] = _nnels_add_visit($arr);
		$arr['session_id'] = session_id();
		//_nnels_update_visit($arr, 1, $account->uid);		
		$_SESSION['nnels_stats'] = $arr;	 
	}
	else {
		_nnels_stats_update_session($account);
	}	

}


/**
 * Implementation of hook_user_insert().
 */
function nnels_stats_user_insert(&$edit, $account, $category) {
	
	if(!empty($_SESSION['nnels_stats'])) {
		$arr = $_SESSION['nnels_stats'];
		if(!empty($arr['visitid']) ) {
			$arr['orgid'] = $_SESSION['calsauthen_target_organization']; //just to be certain we're getting the orgid
			$arr['new_user'] = 1; // this is a new user!
			$arr['authen_result'] = 1;
			$arr['role'] = 1;
			$arr['session_id'] = session_id();
			//successful registration, update db and unset session
			_nnels_update_visit($arr, 1, $account->uid);  
			unset($_SESSION['nnels_stats']);
			//dpm(__FUNCTION__);
		}	
	}
}

/**
 * Implements hook_calsauthen_login_result.
 *
 * @param bool $result
 *   The result of the user's login attempt. Allowed values include:
 *   1 (successfull login), 2 (username unknown), 3 (bad password), 
 *   4 (invalid patron type), 5 (blocked account).
 */
function nnels_stats_calsauthen_login_result($result, $uid = NULL, $orgid = NULL) {
  if( empty($orgid) && !empty($_SESSION['calsauthen_target_organization']) ) {
  	$_SESSION['nnels_stats']['orgid'] = $_SESSION['calsauthen_target_organization'];
    $orgid = $_SESSION['calsauthen_target_organization'];
  }
	//if the uid is a user, reset orgid	
	/*
  if($uid > 0) {
		$orgid = nnels_stats_get_org_by_uid($uid);
		$_SESSION['nnels_stats']['orgid'] = $orgid;
  }
  */

	$_SESSION['nnels_stats']['login_page'] = nnels_stats_get_referrer();
	$arr = isset($_SESSION['nnels_stats']) ? $_SESSION['nnels_stats'] : array();
	
	if(!isset($arr['visitid'])) {
		//rebuild array
		$arr = array(
		  'referrer' => nnels_stats_get_referrer(),
		  'new_user' => 0, //0=returning user, 1=new ... override this in hook_user_insert
		  'referring_url_type' => 4,
		  'orgid' => $orgid,
		  'authen_result' => $result,
		  'ip_address' => $_SERVER['REMOTE_ADDR'],
		  'session_id' => session_id(),
		);
	  drupal_set_message("WOOPS, no visitid, Dave will address!");
	  dpm($_SESSION['nnels_stats']);
	}
	else  _nnels_update_visit($arr, $result, $uid);

	//if successful login, unset the session variable; otherwise, reset the session with a new db insert
 	if ($result == 1) unset($_SESSION['nnels_stats']); 
	else  _nnels_stats_reset_session_failed_login($arr, $uid);
}


/**
 * the main stats tracker
 *
 * @return
 *   tba
 * @todo
 *   lots to do here, like lots
 */
function _nnels_stats_tracker() {

  global $user;
  if( !in_array("patron", $user->roles) && !in_array("anonymous user", $user->roles) ) return;
	$ip = $_SERVER['REMOTE_ADDR'];
	//does the session exist?  
  $session_exists = (isset($_SESSION['nnels_stats']) ) ? TRUE : FALSE;
  //get the referring URL
  $ref = nnels_stats_get_referrer();
	
	$orgid = 0;
	//referring url types: 1 = blank / direct; 2 = external (not partner); 3 = referring (partner); 4 = site?
	//5 = org search
	$tmp = nnels_stats_get_url_type($ref);
	if(is_array($tmp)) {
	  $referring_url_type = $tmp['type'];
	  $orgid = $tmp['orgid'];
	}
	else {
	  $referring_url_type = $tmp;
	}
	
	_nnels_stats_kill_session($referring_url_type, $user, $session_exists);
	//&& $session_exists === FALSE && $user->uid > 0
  if ($session_exists && $_SESSION['nnels_stats']['$referring_url_type'] == 4) {
    return;
  }

	
	if($orgid == 0) $orgid = _nnels_stats_set_orgid();
	//logged in user coming from other site
	if($user->uid > 0 && $referring_url_type != 4 && $referring_url_type != 5) {
	  $visitid = _nnels_stats_add_visit_loggedin($user, $ref, $referring_url_type, $ip);
		//return;
	}	
	//$session_exists === FALSE || referring URL is not site based 
	//|| $referring_url_type != 4
	
  if($user->uid == 0 && (empty($_SESSION['nnels_stats']['visitid']) ) ) {
	  _nnels_stats_set_session($user, $orgid, $ref, $referring_url_type, $ip);
		$session_exists = TRUE;  
	 	$visitid = $_SESSION['nnels_stats']['visitid'];
	 	//dpm($_SESSION['nnels_stats']);
  }

	//drupal_set_message(__METHOD__ . ": referring_url_type = $referring_url_type | REFERRING URL = " . $ref . " | UID = " . $user->uid . " | orgid = $orgid | session_exists = " . $session_exists . " | visitid = $visitid");
	//dpm($_SESSION);  


}

function _nnels_stats_set_orgid() {
	return (isset($_SESSION['calsauthen_target_organization'])) ? $_SESSION['calsauthen_target_organization'] : 0;
}

/**
 * Unsets session variable when UID > 0 or when referring_url_type == 4 (on-site link)
 *
 * @param integer $referring_url_type
 *
 * @param integer $account
 *   
 */
function _nnels_stats_kill_session($referring_url_type, $account, &$session_exists) {
  if($session_exists === TRUE ){
  	if( ($account->uid > 0) || ($account->uid == 0 && $referring_url_type < 4) )  {
	    unset($_SESSION['nnels_stats']);
	    $session_exists = FALSE;
  	}
  }

}

/**
 * Resets nnels_stats session with new visitid value
 * following a failed login attempt
 *
 * @param array $arr
 *
 * @param integer $uid
 *   
 */
function _nnels_stats_reset_session_failed_login($arr, $uid) {
	//drupal_set_message(__FUNCTION__);
	$arr['visitid'] = _nnels_add_visit($arr);
	$_SESSION['nnels_stats'] = $arr;
}

/**
 * Sets nnels_stats session
 *
 * @param array $arr
 *   
 */
function _nnels_stats_update_session($account) {
	
  if(!empty($account->field_organization)) $_SESSION['nnels_stats']['orgid'] = $account->field_organization['und'][0]['nid'];
  $_SESSION['nnels_stats']['login_page'] = nnels_stats_get_referrer();
}

/**
 * Adds a new row for returning users who are already logged in. No session is created.
 *
 * @param array $account
 *   
 */
function _nnels_stats_add_visit_loggedin($account, $ref, $referring_url_type, $ip) {
	$orgid = nnels_stats_get_org_by_uid($account->uid);
	$arr = array(
	  'referrer' => $ref,
	  'new_user' => 0, //0=returning user, 1=new ... override this in hook_user_insert
	  'referring_url_type' => $referring_url_type,
	  'orgid' => $orgid,
	  'pages' => array(),
	  'authen_result' => 88,
	  'session_id' => session_id(),
	  'ip_address' => $ip,
	);
	_nnels_add_visit($arr);

}

/**
 * Sets nnels_stats session
 *
 * @param array $account
 *   
 */
function _nnels_stats_set_session($account, $orgid, $ref, $referring_url_type, $ip) {
  //returning users, but already logged in: don't need a session to track pages.
  if($account->uid > 0) return;
	if($referring_url_type == 4) return;
	//check org id if no session variable
	if($orgid == 0) {
		$orgid = _nnels_stats_get_org_by_referring_url($ref);
	}
	$arr = array(
	  'referrer' => $ref,
	  'new_user' => 0, //0=returning user, 1=new ... override this in hook_user_insert
	  'referring_url_type' => $referring_url_type,
	  'orgid' => $orgid,
	  'authen_result' => 0,
	  'ip_address' => $ip,
	  'session_id' => session_id(),
	);
	$arr['visitid'] = _nnels_add_visit($arr);
	//start the session w/ a new visitid
	$_SESSION['nnels_stats'] = $arr;
 
}

/**
 * deletes non-partner urls after x days: not yet implemented.
 * *   
 */
function _nnels_stats_delete_nonpartners() {
	//db_query("delete from {nnels_stats} where ip_address like '%'");
	
 
}

/**
 * populates db
 *
 * @param array $arr
 *
 * @return integer $visitid
 *  the primary key from the db insert
 *   
 */
function _nnels_add_visit($arr) {
	dpm($arr);
	$visitid = db_insert('nnels_stats')
	  ->fields(array(
	    'new_user' => $arr['new_user'],
	    'authen_result' => $arr['authen_result'],
	    'orgid' => $arr['orgid'],
	    'referring_url_type' => $arr['referring_url_type'],
	    'created' => REQUEST_TIME,
	    'session_id' => $arr['session_id'],
	    'ip_address' => $arr['ip_address'],
	  ))
	  ->execute();
  return $visitid;
 
}

/**
 * updates visit row with authentication result
 *
 * @param array $arr
 * @param integer $result
 *  1 = successful login, ...
 */
/*
		$arr = array();
		$arr['orgid'] = nnels_stats_get_org_by_uid($account->uid);
		$arr['ip_address'] = $_SERVER['REMOTE_ADDR'];
		$arr['referring_url_type'] = 4; //?? nnels_stats_get_url_type($ref); 
	  $arr['new_user'] = 0;
	  $arr['authen_result'] = 1;
*/


function _nnels_update_visit($arr, $result, $uid) {
  if(empty($arr['visitid'])) {
  
  
  }

	if(!empty($arr['visitid']) ) {
		if($arr['orgid'] == 0) $arr['orgid'] = nnels_stats_get_org_by_uid($uid);
		$num_updated = db_update('nnels_stats') 
		  ->fields(array(
		  	'new_user' => $arr['new_user'],
		    'authen_result' => $result,
		    'orgid' => $arr['orgid'],
		    'login_page' => $arr['login_page'],
		    'session_id' => $arr['session_id'],
		    'created' => REQUEST_TIME,
		  ))
		  ->condition('visitid', $arr['visitid'], '=')
		  ->execute();
	}
 
}

/**
 * Get referring URL type.
 *
 * @param string $url
 *   the referring url
 * @return
 *   integer - the url type: 1 = blank / direct; 2 = external (not partner); 3 = referring (partner); 4 = site?
 */
function nnels_stats_get_url_type($url) {
	global $user;

	$uri = $_SERVER['REQUEST_URI'];	
  if(strpos($uri, '/organizations') !== FALSE) {
  	//dpm($uri);
    //return 5;
  }

  $pos = strpos($url, "cals_dev");
  $pos = strpos($url, "nnels.ca"); //look to see if user is on site already
  if($pos !== FALSE) {
    return 4; //ignore this, don't create a session
  }
  if(empty($url)) {
    return 1; //
  }
  //check to see whether we can find an orgid
  $orgid = _nnels_stats_get_org_by_referring_url($url);
  if($orgid > 0) {
    return array("orgid" => $orgid, "type" => 3);
  }
  else {
    return 2;  
  }
}

/**
 * Get user agent.
 *
 * @return
 *   string user agent, or empty string if user agent does not exist
 */
function nnels_stats_get_user_agent() {
  return isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
}

/**
 * Get user agent.
 *
 * @return
 *   string referring URL
 */
function nnels_stats_get_referrer() {
  return isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';
}

/**
 * Get org by referring URL.
 *
 * @return integer - the library node id
 */
function _nnels_stats_get_org_by_referring_url($referring_url) {
  /*
  drush sqlq "SELECT  a.nid, a.setting_name, a.setting_value  FROM calsauthentargets a  WHERE a.setting_name = 'referring_url' AND 'http://theprepkitchen.ca/dev/nnels-urls' REGEXP a.setting_value"
  
  fetchField()
  */
	$nid = db_query("SELECT  nid 
    FROM {calsauthentargets}  
    WHERE setting_name = :setting_name AND :referring_url_value REGEXP setting_value",
    array(':setting_name' => 'referring_url', ':referring_url_value' => $referring_url)
  )->fetchField();  
  drupal_set_message("NID = $nid | referring_url = $referring_url");
  if(!$nid) $nid = 0; 
  return $nid;  
}

/**
 * Get organization NID from $uid.
 *
 * @return
 *   integer node id
 */
function nnels_stats_get_org_by_uid($uid) {
 
  $account = user_load($uid);
  if(!empty($account->field_organization))  {
    return $account->field_organization['und'][0]['nid'];
  }
 
  $nid = db_query(
  	"select field_organization_nid 
  		from {field_data_field_organization} 
  		where entity_id = :uid and entity_type = :type ", 
    	array(":uid" => $uid, ":type" => "user") 
  )->fetchField();
  if(!$nid) $nid = 0; 
  return $nid;  
}


/**
 * Implements hook_entity_info().
 */
function nnels_stats_entity_info() {

  $info = array();

  $info['nnelsvisitor'] = array(
    'label' => t('Visit'),
    'base table' => 'nnels_stats',
    'entity keys' => array(
      'id' => 'visitid',
    ),
    'module' => 'nnels_stats',
    'views controller class' => 'EntityDefaultViewsController',
    
  );

  return $info;
}
/**
 * Simple test ....
 */
function nnels_stats_test_entity() {

	try{
		$type = 'nnelsvisitor';
		$wrapper = entity_metadata_wrapper('nnelsvisitor', 1071);
		
		dpm($wrapper);
		$visits = entity_load('nnelsvisitor', array(1071, 1070));
		dpm($visits);
		$info = entity_get_info($type);
		dpm($info);
		$info = entity_get_info("node");
		dpm($info);
		
		
	}
	catch(Exception $e) {
	
	  dpm($e);
	
	}
	return 'Some string';

}


   

/**
 * Returns information about the default search module.
 *
 * @return
 *    The search_get_info() array element for the default search module, if any.
 */
function nnels_stats_get_default_module_info() {
  $info = nnels_stats_get_info();
  $default = variable_get('nnels_stats_default_module', 'node');
  if (isset($info[$default])) {
    return $info[$default];
  }
  // The variable setting does not match any active module, so just return
  // the info for the first active module (if any).
  return reset($info);
}
