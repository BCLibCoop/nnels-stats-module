<?php
/**
 * @file
 * NNELS Stats module.
 */

/**
 * Implements hook_menu().
 */
function nnels_stats_menu() {
  $items = array();
  /*
  $items['admin/config/nnels_stats'] = array(
    'title' => 'Test NNELS Stats Entity Status',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'nnels_stats_test_entity',
    'type' => MENU_NORMAL_ITEM,
  );
  */
  return $items;
}
/**
 * Implements hook_exit().
 */
function nnels_stats_exit() {
  $ips = array('10.77.110.14', '10.77.110.15', '66.249.79.117'); // nnels, google &/or some other spider??
  $ip = $_SERVER['REMOTE_ADDR'];
  if(!in_array($ip, $ips) && 
    strpos($ip, '10.77.110') === FALSE &&
    strpos($ip, '180.76') === FALSE && 
    strpos($ip, '66.249.79') === FALSE && 
    strpos($ip, '123.125.') === FALSE && 
    strpos($ip, '74.50.238') === FALSE ) {
    _nnels_stats_tracker();  
  } 
}

/**
 * Implements hook_views_api().
 */
function nnels_stats_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'nnels_stats') . '/includes/views',
  );
}

/**
 * Implements hook_form_alter()
 */
function nnels_stats_form_alter(&$form, &$form_state, $form_id) {
  //hook into legal module
  if($form_id == 'legal_login') $form['#submit'][] = nnels_stats_new_registration_submit;

  if($form_id == 'views_exposed_form' && isset($form['new_user']) ) {

    $k = 'new_user';
    $form[$k]['#type'] = 'select';
    $form[$k]['#options'] = array('' => 'Any', 0 => "existing user", 1 => "new user" );
    $form[$k]['#default_value'] = '';
    $form[$k]['#size'] = 1;


    $options = array(
      '' => 'any',
      0 => 'successfull',
      1 => 'unknown username',
      2 => 'bad password',
      3 => 'invalid patron type',
      4 => 'blocked account',
      5 => 'already logged in');
    $k = 'authen_result';
    $form[$k]['#type'] = 'select';
    $form[$k]['#options'] = $options;
    $form[$k]['#default_value'] = '';
    $form[$k]['#size'] = 1;
    $form[$k]['#description'] = '';

    $options = array(
      '' => 'any',
      'ab' => 'Alberta',
      'bc' => 'British Columbia',
      'mb' => 'Manitoba',);
    $k = 'field_address_administrative_area';
    $form[$k]['#type'] = 'select';
    $form[$k]['#options'] = $options;
    $form[$k]['#default_value'] = '';
    $form[$k]['#size'] = 1;
    $form[$k]['#description'] = '';

    $options = array(
      '' => 'Any',
      1 => 'Direct Link',
      2 => 'External URL',
      3 => 'Referring URL',
      4 => 'Onsite Link'
    );
    $k = 'referring_url_type';
    $form[$k]['#type'] = 'select';
    $form[$k]['#options'] = $options;
    $form[$k]['#default_value'] = '';
    $form[$k]['#size'] = 1;
    $form[$k]['#description'] = '';



  }



}

/**
 * Commits new registration to the nnels_stats table
 */
function nnels_stats_new_registration_submit($form, &$form_state) {
	//check to see if there's a session array; if not, rebuild w/ uid from legal module.	
	//if rebuild = 1     
  if( $form_state['values']['legal_accept'] == 1 && 
  	( empty($_SESSION['nnels_stats']['orgid']) || empty($_SESSION['nnels_stats']['visitid']) ) ) {
  	$uid = $form_state['values']['uid'];
  	$account = user_load($uid);
  	$orgid = nnels_stats_get_org_by_uid($uid);
  	_nnels_stats_build_session($uid, $orgid, 1, 4); 
  }   
  $arr = $_SESSION['nnels_stats'];
  if(!empty($arr['visitid']) && $arr['visitid'] > 0 ) {
    $arr['new_user'] = 1; // this is a new user!
    $arr['authen_result'] = 1;
    $arr['role'] = 1;
    $arr['session_id'] = session_id();
    //successful registration, update db and unset session
    _nnels_update_visit($arr, 1, $account->uid);  
    unset($_SESSION['nnels_stats']);
  }		
}


/**
 * Implements hook_calsauthen_login_result.
 *
 * @param bool $result
 *   The result of the user's login attempt: 1 (successfull login)
 *   See views/handlers/nnels_stats_views_handler_authentication_results.inc for other enumerations 
 */
function nnels_stats_calsauthen_login_result($result, $uid = NULL, $orgid = NULL) {
	
	//return when NNELS' connector tests login to site: https://github.com/BCLibCoop/nnels/issues/77
  if($_SERVER['REMOTE_ADDR'] == '10.77.110.14') return;   

	$update = 1;
  if(!isset($_SESSION['nnels_stats']['visitid'])) {
    $ref_type = (isset($_SESSION['nnels_stats']['referring_url_type'])) ? $_SESSION['nnels_stats']['referring_url_type'] : 4;
    _nnels_stats_build_session($uid, $orgid, $result, $ref_type);
    $arr = $_SESSION['nnels_stats'];
  }
  else { //this is what we would normally expect
	  $_SESSION['nnels_stats']['login_page'] =  nnels_stats_get_referrer(); //page the user logged in via
	  $arr = $_SESSION['nnels_stats'];
	  _nnels_update_visit($arr, $result, $uid);
  }
  
  //if successful login, unset the session variable; otherwise, reset the session with a new db insert
  if ($result == 1) unset($_SESSION['nnels_stats']); 
  else  _nnels_stats_reset_session_failed_login($arr, $uid);
}


/**
 * the main stats tracker: builds a session variable (nnels_stats) to track user's login and registration attempt
 */
function _nnels_stats_tracker() {
  global $user;
  if( !in_array("patron", $user->roles) && !in_array("anonymous user", $user->roles) )  return;
  $ip = $_SERVER['REMOTE_ADDR'];
	//does the session exist?  
  $session_exists = (isset($_SESSION['nnels_stats']) ) ? TRUE : FALSE;
  //get the referring URL
  $ref = nnels_stats_get_referrer(); //referring URL
  $orgid = 0;
  //referring url types: 1 = blank / direct; 2 = external (not partner); 3 = referring (partner); 4 = site link
  $tmp = nnels_stats_get_referring_url_type($ref);
  if(is_array($tmp)) {
    $ref_type = $tmp['type'];
    $orgid = $tmp['orgid'];
  }
  else {
    $ref_type = $tmp;
  }
  dpm($user->uid);
  dpm("REF TYPE: " . $ref_type);
  _nnels_stats_kill_session($ref_type, $user, $session_exists); //kill old sessions
  
  if($user->uid > 0 && $ref_type != 4) { //logged in user coming from other site
    _nnels_stats_add_visit_loggedin($user, $ref, $ref_type, $ip);
    dpm("ALREADY LOGGED IN");
    return;
  } 

  if ($session_exists && $_SESSION['nnels_stats']['ref_type'] == 4) {
    return;
  }

  if($orgid == 0) $orgid = _nnels_stats_get_orgid_from_calsauthen();
  //if orgid is still 0, try to get orgid from referring URL. Probably pull this later.
  if($orgid == 0) $orgid = _nnels_stats_get_org_by_referring_url($ref);
  
  if( $user->uid == 0 && empty($_SESSION['nnels_stats']) && $ref_type != 4 ) {
    _nnels_stats_build_session($user->uid, $orgid, 0, $ref_type);
  }
}


/**
 * Unsets session variable when UID > 0 or when referring_url_type == 4 (on-site link)
 *
 * @param integer $referring_url_type
 * @param integer $account   
 */
function _nnels_stats_kill_session($referring_url_type, $account, &$session_exists) {
  if($session_exists === TRUE ){
    if( ($account->uid > 0) || ($account->uid == 0 && $referring_url_type < 4) )  {
      unset($_SESSION['nnels_stats']);
      $session_exists = FALSE;
    }
  }

}

/**
 * Resets nnels_stats session with new visitid value
 * following a failed login attempt
 *
 * @param array $arr
 *
 * @param integer $uid
 */
function _nnels_stats_reset_session_failed_login($arr, $uid) {
  $arr['visitid'] = _nnels_add_visit($arr);
  $_SESSION['nnels_stats'] = $arr;
}

/**
 * Sets nnels_stats session
 *
 * @param array $arr
 */
function _nnels_stats_update_session($account) {
  if(!empty($account->field_organization)) $_SESSION['nnels_stats']['orgid'] = $account->field_organization['und'][0]['nid'];
  $_SESSION['nnels_stats']['login_page'] = nnels_stats_get_referrer();
}

/**
 * Adds a new row for returning users who are already logged in. No session is created.
 *
 * @param array $account
 *   
 */
function _nnels_stats_add_visit_loggedin($account, $ref, $ref_type, $ip) {
  $orgid = nnels_stats_get_org_by_uid($account->uid);
  $arr = array(
    'referrer' => $ref,
    'new_user' => 0, //0=returning user, 1=new ... override this in hook_user_insert
    'referring_url_type' => $ref_type,
    'orgid' => $orgid,
    'pages' => array(),
    'authen_result' => 88,
    'session_id' => session_id(),
    'ip_address' => $ip,
  );
  _nnels_add_visit($arr);
}


/**
 * Builds main session variable
 *
 * @param string $uid
 *  The user's uid
 * @param string $orgid
 *  The orgid, often determined by the session set by calsauthen or by the URL of the login page
 * @param string $result
 *  The authentication attempt result, preset to 0 (no login attempt)
 * @param string $ref_type
 *  Referring url types: 1 = blank / direct; 2 = external (not partner); 3 = referring (partner); 4 = on site link
 *   
 */
function _nnels_stats_build_session($uid, $orgid, $result, $ref_type) {
	$arr = array();
	$arr['orgid'] = $orgid;
	$arr['ip_address'] = $_SERVER['REMOTE_ADDR'];
	$ref = nnels_stats_get_referrer();
	$arr['referring_url_type'] = $ref_type; //?? nnels_stats_get_referring_url_type($ref); 
	$arr['new_user'] = 0;
	$arr['authen_result'] = $result;
	$arr['session_id'] = session_id();
	$referrer = truncate_utf8(nnels_stats_get_referrer(), 250, FALSE, FALSE, 0);
	if(strpos($referrer, "legal_accept")) $referrer = "legal_accept"; //the legal module injects the UID, so let's strip out.
	$arr['referrer'] = $referrer;
	$arr['login_page'] =  $referrer;
	if($orgid > 0) $arr['visitid'] = _nnels_add_visit($arr);
	//copy array to session var	
	$_SESSION['nnels_stats'] = $arr;
}

/**
 * deletes non-partner urls after x days: not yet implemented.
 * *   
 */
function _nnels_stats_delete_nonpartners() {
  //db_query("delete from {nnels_stats} where ip_address like '%'");
}

/**
 * populates db
 *
 * @param array $arr
 *
 * @return integer $visitid
 *  the primary key from the db insert
 */
function _nnels_add_visit($arr) {
  if($arr['orgid'] > 0) {
    $visitid = db_insert('nnels_stats')
      ->fields(array(
        'new_user' => $arr['new_user'],
        'authen_result' => $arr['authen_result'],
        'orgid' => $arr['orgid'],
        'referring_url_type' => $arr['referring_url_type'],
        'created' => REQUEST_TIME,
        'session_id' => $arr['session_id'],
        'ip_address' => $arr['ip_address'],
        'login_page' => $arr['login_page'],
      ))
      ->execute();
    return $visitid;
  
  }
  return NULL;
}

/**
 * updates visit row with authentication result
 *
 * @param array $arr
 * @param integer $result
 *  1 = successful login, ...
 */

function _nnels_update_visit($arr, $result, $uid) {
  if(!empty($arr['visitid']) ) {

		//if the orgid is still null/0, try to populate via the user's profile
    if($arr['orgid'] == 0 || empty($arr['orgid']) ) $arr['orgid'] = nnels_stats_get_org_by_uid($uid);
    
    $num_updated = db_update('nnels_stats') 
      ->fields(array(
        'new_user' => $arr['new_user'],
        'authen_result' => $result,
        'orgid' => $arr['orgid'],
        'login_page' => $arr['login_page'],
        'session_id' => $arr['session_id'],
        'created' => REQUEST_TIME,
      ))
      ->condition('visitid', $arr['visitid'], '=')
      ->execute();
  }
 
}

/**
 * Get orgid from calsauthen session var
 *
 * @return integer - the library node id
 */
function _nnels_stats_get_orgid_from_calsauthen() {
  return (isset($_SESSION['calsauthen_target_organization'])) ? $_SESSION['calsauthen_target_organization'] : 0;
}

/**
 * Get org by referring URL.
 *
 * @return integer - the library node id
 */
function _nnels_stats_get_org_by_referring_url($referring_url) {
  /*
  drush sqlq "SELECT  a.nid, a.setting_name, a.setting_value  FROM calsauthentargets a  WHERE a.setting_name = 'referring_url' AND 'http://theprepkitchen.ca/dev/nnels-urls' REGEXP a.setting_value"
  
  fetchField()
  */
  $nid = db_query("SELECT  nid 
    FROM {calsauthentargets}  
    WHERE setting_name = :setting_name AND :referring_url_value REGEXP setting_value",
    array(':setting_name' => 'referring_url', ':referring_url_value' => $referring_url)
  )->fetchField();  
  if(!$nid) $nid = 0; 
  return $nid;  
}

/**
 * Get organization NID from $uid.
 *
 * @return integer
 *   The node id
 */
function nnels_stats_get_org_by_uid($uid) {
 
  $account = user_load($uid);
  if(!empty($account->field_organization))  {
    return $account->field_organization['und'][0]['nid'];
  }
 
  $nid = db_query(
    "select field_organization_nid 
      from {field_data_field_organization} 
      where entity_id = :uid and entity_type = :type ", 
      array(":uid" => $uid, ":type" => "user") 
  )->fetchField();
  if(!$nid) $nid = 0; 
  return $nid;  
}

/**
 * Get referring URL type.
 *
 * @param string $url
 *   the referring url
 * @return
 *   integer - the url type: 1 = blank / direct; 2 = external (not partner); 3 = referring (partner); 4 = site?
 */
function nnels_stats_get_referring_url_type($url) {
  $pos = strpos($url, "nnels.ca"); //look to see if user is on site already
  if($pos !== FALSE) {
    return 4; //ignore this, don't create a session
  }
  if(empty($url)) {
    return 1; //
  }
  //check to see whether we can find an orgid
  $orgid = _nnels_stats_get_org_by_referring_url($url);
  if($orgid > 0) {
    return array("orgid" => $orgid, "type" => 3);
  }
  else {
    return 2;  
  }
}

/**
 * Get user agent.
 *
 * @return string
 *   The user agent, or empty string if user agent does not exist
 */
function nnels_stats_get_user_agent() {
  return isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
}

/**
 * Get referring url
 *
 * @return string
 *   The referring URL, null if one can't be determined
 */
function nnels_stats_get_referrer() {
  return isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';
}

/**
 * Implements hook_entity_info(). Not currently implemented.
 */
function nnels_stats_entity_info() {

  $info = array();

  $info['nnelsvisitor'] = array(
    'label' => t('Visit'),
    'base table' => 'nnels_stats',
    'entity keys' => array(
      'id' => 'visitid',
    ),
    'module' => 'nnels_stats',
    'views controller class' => 'EntityDefaultViewsController',
    
  );

  return $info;
}